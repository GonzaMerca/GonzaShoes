@model GonzaShoes.Model.DTOs.Product.ProductDTO

@{
    ViewData["Title"] = Model.Id == 0 ? "Crear Producto" : "Editar Producto";
}

<h2>@ViewData["Title"]</h2>

<form asp-action="Save" method="post">
    <!-- Muestra los errores generales de validación -->
    <div class="form-group">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label for="BrandId">Marca</label>
        <select id="BrandId" name="BrandId" class="form-control" required>
            <option value="">Seleccione una marca</option>
            @foreach (var brand in ViewBag.Brands)
            {
                <option value="@brand.Id"
                        selected="@(Model.BrandId == brand.Id)"
                        data-models='@Json.Serialize(brand.NameIds)'>
                    @brand.Name
                </option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="ModelProductId">Modelo</label>
        <select id="ModelProductId" name="ModelProductId" class="form-control" required>
            <option value="">Seleccione un modelo</option>
        </select>
    </div>

    <div class="form-group">
        <label for="ColorId">Color</label>
        <div class="color-picker-container">
            <select id="ColorId" name="ColorId" class="form-control" required>
                <option value="" data-color="">Seleccione un color</option>
                @foreach (var color in ViewBag.Colors)
                {
                    <option value="@color.Id" data-color="@color.Tag" selected="@(Model.ColorId == color.Id)">
                        @color.Name
                    </option>
                }
            </select>
            <span id="color-preview"></span>
        </div>
    </div>

    <div class="form-group">
        <label for="BrandId">Tamaño</label>
        <select id="SizeId" name="SizeId" class="form-control" required>
            <option value="">Seleccione un talle</option>
            @foreach (var size in ViewBag.Sizes)
            {
                <option value="@size.Id" selected="@(Model.SizeId == size.Id)">
                    @size.Name
                </option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="price">Precio</label>
        <input type="text" id="price" name="price" class="form-control" value="@Model.Price" required />
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label for="stock">Stock</label>
        <input type="text" id="stock" name="stock" class="form-control" value="@Model.Stock" required />
        @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
    </div>

    <input type="hidden" name="Id" value="@Model.Id" />

    <!-- Botones con espacio entre ellos -->
    <div class="form-group mt-4 d-flex">
        <button type="submit" class="btn btn-primary btn-lg me-3">
            @((Model.Id == 0) ? "Crear" : "Guardar")
        </button>
        <a href="@Url.Action("Index", "Product")" class="btn btn-secondary btn-lg">Volver a la lista</a>
    </div>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const brandSelect = document.getElementById("BrandId");
        const modelSelect = document.getElementById("ModelProductId");
        const selectedModelId = "@Model.ModelProductId"; // ID del modelo preseleccionado

        function updateModels() {
            const selectedOption = brandSelect.options[brandSelect.selectedIndex];
            const models = JSON.parse(selectedOption.getAttribute("data-models") || "[]");

            modelSelect.innerHTML = '<option value="">Seleccione un Modelo</option>';

            models.forEach(model => {
                const option = document.createElement("option");
                option.value = model.id;
                option.textContent = model.name;

                // Preseleccionar si coincide con Model.ModelProductId
                if (model.id == selectedModelId) {
                    option.selected = true;
                }

                modelSelect.appendChild(option);
            });
        }

        brandSelect.addEventListener("change", updateModels);

        // Si ya hay una marca seleccionada, cargar los modelos
        if (brandSelect.value) {
            updateModels();
        }
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let select = document.getElementById("ColorId");
        let colorPreview = document.getElementById("color-preview");

        function updateColor() {
            let selectedOption = select.options[select.selectedIndex];
            let colorCode = selectedOption.getAttribute("data-color") || "#ffffff";
            colorPreview.style.backgroundColor = colorCode;
        }

        select.addEventListener("change", updateColor);
        updateColor(); // Inicializa el color seleccionado si ya hay uno
    });
</script>